---
import { Image } from "astro:assets";
import logo from "@/assets/dinoware-logo.svg";

interface FAQItem {
  question: string;
  answer: string;
}

const faqItems: FAQItem[] = [
  {
    question: "How can Dinoware help my business evolve?",
    answer:
      "Just like dinosaurs once ruled the Earth, we empower your business to lead in its digital ecosystem — with custom solutions that adapt, scale, and evolve alongside your goals.",
  },
  {
    question: "What industries do you specialize in?",
    answer:
      "We build tailored tech solutions across logistics, healthcare, retail, fintech, and more. No matter your industry, we identify pain points and create technology that transforms them into opportunities.",
  },
  {
    question: "Is Dinoware suitable for startups or only big companies?",
    answer:
      "Whether you're a rising startup or a well-established enterprise, we tailor strategies to fit your scale. We help new ideas take flight and legacy systems leap forward — always with agility and precision.",
  },
  {
    question: "What’s unique about working with Dinoware?",
    answer:
      "We combine innovation with resilience — a true dinosaur mindset. Our team brings cutting-edge technology and strategic thinking to every project, ensuring you’re not just modern, but future-proof.",
  },
  {
    question: "Do I need to be tech-savvy to work with you?",
    answer:
      "Absolutely not. We believe in clear, human communication. Whether you’re a developer or a dreamer, we guide you with clarity through each stage — from concept to execution.",
  },
  {
    question: "How do I know if my idea is viable?",
    answer:
      "We run discovery sessions to explore and shape your concept, followed by rapid prototyping. This allows us to validate the vision early, saving time and resources before full development begins.",
  },
  {
    question: "Can you work with our existing systems?",
    answer:
      "Yes! We’re experts at integrating with legacy software and modernizing without disruption. We improve what’s already working and optimize what isn’t — efficiently and reliably.",
  },
  {
    question: "Do you provide post-launch support?",
    answer:
      "Definitely. We stay with you beyond the launch, offering updates, maintenance, and scaling strategies so your product continues to thrive in an ever-changing digital environment.",
  },
  {
    question: "How fast can we get started?",
    answer:
      "Fast. Like, raptor-fast. Once we understand your needs, we build a clear roadmap and begin executing almost immediately — without endless meetings or delays.",
  },
  {
    question: "Is Dinoware future-proof?",
    answer:
      "We don't chase trends — we engineer what's next. Our team is always learning, evolving, and building with tomorrow in mind, so your solutions stay relevant and powerful.",
  },
];
---

<section class="relative w-full min-h-[900px] bg-primary py-24 px-4 text-white">
  <div
    class="max-w-5xl h-full mx-auto flex justify-center items-center flex-col z-10"
  >
    <h2 class="text-3xl md:text-4xl font-bold text-center mb-2">
      Unleashing Answers in the Tech Jurassic Era
    </h2>
    <span class="mb-12 text-xl">
      Navigate the evolving landscape of innovation with Dinoware's most
      frequent insights.
    </span>

    <div class="space-y-4">
      {
        faqItems.map((item, index) => (
          <div class="faq-item border border-white/20 rounded-lg overflow-hidden">
            <button
              class="faq-button w-full flex justify-between items-center p-5 bg-white/10 hover:bg-white/20 transition-colors duration-200"
              aria-expanded="false"
              aria-controls={`faq-answer-${index}`}
            >
              <span class="text-left text-xl md:text-2xl font-bold text-white">
                {item.question}
              </span>
              <svg
                class="w-6 h-6 text-white transition-transform duration-300"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 9l-7 7-7-7"
                />
              </svg>
            </button>

            <div
              id={`faq-answer-${index}`}
              class="faq-answer overflow-hidden max-h-0 transition-all duration-500"
            >
              <div class="p-5 bg-white/5 text-white/90 font-semibold text-lg md:text-xl leading-relaxed">
                {item.answer}
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>

  <Image
    src={logo}
    alt="Logo"
    class="absolute bottom-0 left-0 w-[300px] lg:w-[350px] xl:w-[500px] z-10 pointer-events-none opacity-30"
  />
</section>

<script>
  interface FAQElement {
    button: HTMLButtonElement;
    answer: HTMLElement;
    icon: SVGElement;
  }

  class FAQController {
    private items: FAQElement[];

    constructor() {
      this.items = this.initializeItems();
      this.setupEventListeners();
    }

    private initializeItems(): FAQElement[] {
      const faqItems = document.querySelectorAll(".faq-item");
      return Array.from(faqItems).map((item) => {
        const button = item.querySelector(".faq-button") as HTMLButtonElement;
        const answer = item.querySelector(".faq-answer") as HTMLElement;
        const icon = button.querySelector("svg") as SVGElement;

        if (!button || !answer || !icon) {
          throw new Error("Required FAQ elements not found");
        }

        return { button, answer, icon };
      });
    }

    private setupEventListeners(): void {
      this.items.forEach((item, index) => {
        item.button.addEventListener("click", () => this.toggleItem(index));
      });
    }

    private toggleItem(index: number): void {
      const currentItem = this.items[index];
      const isExpanded =
        currentItem.button.getAttribute("aria-expanded") === "true";

      // Cerrar todos los items excepto el actual
      this.items.forEach((item, i) => {
        if (i !== index) {
          this.closeItem(item);
        }
      });

      // Alternar el estado del item actual
      if (!isExpanded) {
        this.openItem(currentItem);
      } else {
        this.closeItem(currentItem);
      }
    }

    private openItem(item: FAQElement): void {
      item.button.setAttribute("aria-expanded", "true");
      item.answer.style.maxHeight = `${item.answer.scrollHeight}px`;
      item.icon.style.transform = "rotate(180deg)";
    }

    private closeItem(item: FAQElement): void {
      item.button.setAttribute("aria-expanded", "false");
      item.answer.style.maxHeight = "0";
      item.icon.style.transform = "rotate(0deg)";
    }
  }

  const initFAQ = (): void => {
    try {
      new FAQController();
    } catch (error) {
      console.error("Error initializing FAQ:", error);
    }
  };

  document.addEventListener("DOMContentLoaded", initFAQ);
  if (document.readyState === "complete") initFAQ();
</script>
